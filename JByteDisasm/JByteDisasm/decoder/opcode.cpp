#include "opcode.hpp"
#include <unordered_map>

std::unordered_map<opcode_t, const std::string> opcode_str_map =
{
	{NOP, OPCODE_TEXT(NOP)},
	{ACONST_NULL, OPCODE_TEXT(ACONST_NULL)},
	{ICONST_M1, OPCODE_TEXT(ICONST_M1)},
	{ICONST_0, OPCODE_TEXT(ICONST_0)},
	{ICONST_1, OPCODE_TEXT(ICONST_1)},
	{ICONST_2, OPCODE_TEXT(ICONST_2)},
	{ICONST_3, OPCODE_TEXT(ICONST_3)},
	{ICONST_4, OPCODE_TEXT(ICONST_4)},
	{ICONST_5, OPCODE_TEXT(ICONST_5)},
	{LCONST_0, OPCODE_TEXT(LCONST_0)},
	{LCONST_1, OPCODE_TEXT(LCONST_1)},
	{FCONST_0, OPCODE_TEXT(FCONST_0)},
	{FCONST_1, OPCODE_TEXT(FCONST_1)},
	{FCONST_2, OPCODE_TEXT(FCONST_2)},
	{DCONST_0, OPCODE_TEXT(DCONST_0)},
	{DCONST_1, OPCODE_TEXT(DCONST_1)},
	{BIPUSH, OPCODE_TEXT(BIPUSH)},
	{SIPUSH, OPCODE_TEXT(SIPUSH)},
	{LDC, OPCODE_TEXT(LDC)},
	{LDC_W, OPCODE_TEXT(LDC_W)},
	{LDC2_W, OPCODE_TEXT(LDC2_W)},
	{ILOAD, OPCODE_TEXT(ILOAD)},
	{LLOAD, OPCODE_TEXT(LLOAD)},
	{FLOAD, OPCODE_TEXT(FLOAD)},
	{DLOAD, OPCODE_TEXT(DLOAD)},
	{ALOAD, OPCODE_TEXT(ALOAD)},
	{ILOAD_0, OPCODE_TEXT(ILOAD_0)},
	{ILOAD_1, OPCODE_TEXT(ILOAD_1)},
	{ILOAD_2, OPCODE_TEXT(ILOAD_2)},
	{ILOAD_3, OPCODE_TEXT(ILOAD_3)},
	{LLOAD_0, OPCODE_TEXT(LLOAD_0)},
	{LLOAD_1, OPCODE_TEXT(LLOAD_1)},
	{LLOAD_2, OPCODE_TEXT(LLOAD_2)},
	{LLOAD_3, OPCODE_TEXT(LLOAD_3)},
	{FLOAD_0, OPCODE_TEXT(FLOAD_0)},
	{FLOAD_1, OPCODE_TEXT(FLOAD_1)},
	{FLOAD_2, OPCODE_TEXT(FLOAD_2)},
	{FLOAD_3, OPCODE_TEXT(FLOAD_3)},
	{DLOAD_0, OPCODE_TEXT(DLOAD_0)},
	{DLOAD_1, OPCODE_TEXT(DLOAD_1)},
	{DLOAD_2, OPCODE_TEXT(DLOAD_2)},
	{DLOAD_3, OPCODE_TEXT(DLOAD_3)},
	{ALOAD_0, OPCODE_TEXT(ALOAD_0)},
	{ALOAD_1, OPCODE_TEXT(ALOAD_1)},
	{ALOAD_2, OPCODE_TEXT(ALOAD_2)},
	{ALOAD_3, OPCODE_TEXT(ALOAD_3)},
	{IALOAD, OPCODE_TEXT(IALOAD)},
	{LALOAD, OPCODE_TEXT(LALOAD)},
	{FALOAD, OPCODE_TEXT(FALOAD)},
	{DALOAD, OPCODE_TEXT(DALOAD)},
	{AALOAD, OPCODE_TEXT(AALOAD)},
	{BALOAD, OPCODE_TEXT(BALOAD)},
	{CALOAD, OPCODE_TEXT(CALOAD)},
	{SALOAD, OPCODE_TEXT(SALOAD)},
	{ISTORE, OPCODE_TEXT(ISTORE)},
	{LSTORE, OPCODE_TEXT(LSTORE)},
	{FSTORE, OPCODE_TEXT(FSTORE)},
	{DSTORE, OPCODE_TEXT(DSTORE)},
	{ASTORE, OPCODE_TEXT(ASTORE)},
	{ISTORE_0, OPCODE_TEXT(ISTORE_0)},
	{ISTORE_1, OPCODE_TEXT(ISTORE_1)},
	{ISTORE_2, OPCODE_TEXT(ISTORE_2)},
	{ISTORE_3, OPCODE_TEXT(ISTORE_3)},
	{LSTORE_0, OPCODE_TEXT(LSTORE_0)},
	{LSTORE_1, OPCODE_TEXT(LSTORE_1)},
	{LSTORE_2, OPCODE_TEXT(LSTORE_2)},
	{LSTORE_3, OPCODE_TEXT(LSTORE_3)},
	{FSTORE_0, OPCODE_TEXT(FSTORE_0)},
	{FSTORE_1, OPCODE_TEXT(FSTORE_1)},
	{FSTORE_2, OPCODE_TEXT(FSTORE_2)},
	{FSTORE_3, OPCODE_TEXT(FSTORE_3)},
	{DSTORE_0, OPCODE_TEXT(DSTORE_0)},
	{DSTORE_1, OPCODE_TEXT(DSTORE_1)},
	{DSTORE_2, OPCODE_TEXT(DSTORE_2)},
	{DSTORE_3, OPCODE_TEXT(DSTORE_3)},
	{ASTORE_0, OPCODE_TEXT(ASTORE_0)},
	{ASTORE_1, OPCODE_TEXT(ASTORE_1)},
	{ASTORE_2, OPCODE_TEXT(ASTORE_2)},
	{ASTORE_3, OPCODE_TEXT(ASTORE_3)},
	{IASTORE, OPCODE_TEXT(IASTORE)},
	{LASTORE, OPCODE_TEXT(LASTORE)},
	{FASTORE, OPCODE_TEXT(FASTORE)},
	{DASTORE, OPCODE_TEXT(DASTORE)},
	{AASTORE, OPCODE_TEXT(AASTORE)},
	{BASTORE, OPCODE_TEXT(BASTORE)},
	{CASTORE, OPCODE_TEXT(CASTORE)},
	{SASTORE, OPCODE_TEXT(SASTORE)},
	{POP, OPCODE_TEXT(POP)},
	{POP2, OPCODE_TEXT(POP2)},
	{DUP, OPCODE_TEXT(DUP)},
	{DUP_X1, OPCODE_TEXT(DUP_X1)},
	{DUP_X2, OPCODE_TEXT(DUP_X2)},
	{DUP2, OPCODE_TEXT(DUP2)},
	{DUP2_X1, OPCODE_TEXT(DUP2_X1)},
	{DUP2_X2, OPCODE_TEXT(DUP2_X2)},
	{SWAP, OPCODE_TEXT(SWAP)},
	{IADD, OPCODE_TEXT(IADD)},
	{LADD, OPCODE_TEXT(LADD)},
	{FADD, OPCODE_TEXT(FADD)},
	{DADD, OPCODE_TEXT(DADD)},
	{ISUB, OPCODE_TEXT(ISUB)},
	{LSUB, OPCODE_TEXT(LSUB)},
	{FSUB, OPCODE_TEXT(FSUB)},
	{DSUB, OPCODE_TEXT(DSUB)},
	{IMUL, OPCODE_TEXT(IMUL)},
	{LMUL, OPCODE_TEXT(LMUL)},
	{FMUL, OPCODE_TEXT(FMUL)},
	{DMUL, OPCODE_TEXT(DMUL)},
	{IDIV, OPCODE_TEXT(IDIV)},
	{LDIV, OPCODE_TEXT(LDIV)},
	{FDIV, OPCODE_TEXT(FDIV)},
	{DDIV, OPCODE_TEXT(DDIV)},
	{IREM, OPCODE_TEXT(IREM)},
	{LREM, OPCODE_TEXT(LREM)},
	{FREM, OPCODE_TEXT(FREM)},
	{DREM, OPCODE_TEXT(DREM)},
	{INEG, OPCODE_TEXT(INEG)},
	{LNEG, OPCODE_TEXT(LNEG)},
	{FNEG, OPCODE_TEXT(FNEG)},
	{DNEG, OPCODE_TEXT(DNEG)},
	{ISHL, OPCODE_TEXT(ISHL)},
	{LSHL, OPCODE_TEXT(LSHL)},
	{ISHR, OPCODE_TEXT(ISHR)},
	{LSHR, OPCODE_TEXT(LSHR)},
	{IUSHR, OPCODE_TEXT(IUSHR)},
	{LUSHR, OPCODE_TEXT(LUSHR)},
	{IAND, OPCODE_TEXT(IAND)},
	{LAND, OPCODE_TEXT(LAND)},
	{IOR, OPCODE_TEXT(IOR)},
	{LOR, OPCODE_TEXT(LOR)},
	{IXOR, OPCODE_TEXT(IXOR)},
	{LXOR, OPCODE_TEXT(LXOR)},
	{IINC, OPCODE_TEXT(IINC)},
	{I2L, OPCODE_TEXT(I2L)},
	{I2F, OPCODE_TEXT(I2F)},
	{I2D, OPCODE_TEXT(I2D)},
	{L2I, OPCODE_TEXT(L2I)},
	{L2F, OPCODE_TEXT(L2F)},
	{L2D, OPCODE_TEXT(L2D)},
	{F2I, OPCODE_TEXT(F2I)},
	{F2L, OPCODE_TEXT(F2L)},
	{F2D, OPCODE_TEXT(F2D)},
	{D2I, OPCODE_TEXT(D2I)},
	{D2L, OPCODE_TEXT(D2L)},
	{D2F, OPCODE_TEXT(D2F)},
	{I2B, OPCODE_TEXT(I2B)},
	{I2C, OPCODE_TEXT(I2C)},
	{I2S, OPCODE_TEXT(I2S)},
	{LCMP, OPCODE_TEXT(LCMP)},
	{FCMPL, OPCODE_TEXT(FCMPL)},
	{FCMPG, OPCODE_TEXT(FCMPG)},
	{DCMPL, OPCODE_TEXT(DCMPL)},
	{DCMPG, OPCODE_TEXT(DCMPG)},
	{IFEQ, OPCODE_TEXT(IFEQ)},
	{IFNE, OPCODE_TEXT(IFNE)},
	{IFLT, OPCODE_TEXT(IFLT)},
	{IFGE, OPCODE_TEXT(IFGE)},
	{IFGT, OPCODE_TEXT(IFGT)},
	{IFLE, OPCODE_TEXT(IFLE)},
	{IF_ICMPEQ, OPCODE_TEXT(IF_ICMPEQ)},
	{IF_ICMPNE, OPCODE_TEXT(IF_ICMPNE)},
	{IF_ICMPLT, OPCODE_TEXT(IF_ICMPLT)},
	{IF_ICMPGE, OPCODE_TEXT(IF_ICMPGE)},
	{IF_ICMPGT, OPCODE_TEXT(IF_ICMPGT)},
	{IF_ICMPLE, OPCODE_TEXT(IF_ICMPLE)},
	{IF_ACMPEQ, OPCODE_TEXT(IF_ACMPEQ)},
	{IF_ACMPNE, OPCODE_TEXT(IF_ACMPNE)},
	{GOTO, OPCODE_TEXT(GOTO)},
	{JSR, OPCODE_TEXT(JSR)},
	{RET, OPCODE_TEXT(RET)},
	{TABLESWITCH, OPCODE_TEXT(TABLESWITCH)},
	{LOOKUPSWITCH, OPCODE_TEXT(LOOKUPSWITCH)},
	{IRETURN, OPCODE_TEXT(IRETURN)},
	{LRETURN, OPCODE_TEXT(LRETURN)},
	{FRETURN, OPCODE_TEXT(FRETURN)},
	{DRETURN, OPCODE_TEXT(DRETURN)},
	{ARETURN, OPCODE_TEXT(ARETURN)},
	{RETURN, OPCODE_TEXT(RETURN)},
	{GETSTATIC, OPCODE_TEXT(GETSTATIC)},
	{PUTSTATIC, OPCODE_TEXT(PUTSTATIC)},
	{GETFIELD, OPCODE_TEXT(GETFIELD)},
	{PUTFIELD, OPCODE_TEXT(PUTFIELD)},
	{INVOKEVIRTUAL, OPCODE_TEXT(INVOKEVIRTUAL)},
	{INVOKESPECIAL, OPCODE_TEXT(INVOKESPECIAL)},
	{INVOKESTATIC, OPCODE_TEXT(INVOKESTATIC)},
	{INVOKEINTERFACE, OPCODE_TEXT(INVOKEINTERFACE)},
	{INVOKEDYNAMIC, OPCODE_TEXT(INVOKEDYNAMIC)},
	{NEW, OPCODE_TEXT(NEW)},
	{NEWARRAY, OPCODE_TEXT(NEWARRAY)},
	{ANEWARRAY, OPCODE_TEXT(ANEWARRAY)},
	{ARRAYLENGTH, OPCODE_TEXT(ARRAYLENGTH)},
	{ATHROW, OPCODE_TEXT(ATHROW)},
	{CHECKCAST, OPCODE_TEXT(CHECKCAST)},
	{INSTANCEOF, OPCODE_TEXT(INSTANCEOF)},
	{MONITORENTER, OPCODE_TEXT(MONITORENTER)},
	{MONITOREXIT, OPCODE_TEXT(MONITOREXIT)},
	{WIDE, OPCODE_TEXT(WIDE)},
	{MULTIANEWARRAY, OPCODE_TEXT(MULTIANEWARRAY)},
	{IFNULL, OPCODE_TEXT(IFNULL)},
	{IFNONNULL, OPCODE_TEXT(IFNONNULL)},
	{GOTO_W, OPCODE_TEXT(GOTO_W)},
	{JSR_W, OPCODE_TEXT(JSR_W)},
	{BREAKPOINT, OPCODE_TEXT(BREAKPOINT)},
	{IMPDEP1, OPCODE_TEXT(IMPDEP1)},
	{IMPDEP2, OPCODE_TEXT(IMPDEP2)}
};

std::optional<std::string> get_opcode_str(opcode_t op)
{
	auto it = opcode_str_map.find(op);

	if (it == opcode_str_map.end())
	{
		return std::nullopt;
	}

	return std::make_optional<std::string>(it->second);
}

std::string get_array_type_str(array_type_t type)
{
	std::string str;

	switch (type)
	{
	case T_BOOLEAN:
	{
		str = "boolean";
		break;
	}
	case T_BYTE:
	{
		str = "byte";
		break;
	}
	case T_CHAR:
	{
		str = "char";
		break;
	}
	case T_SHORT:
	{
		str = "short";
		break;
	}
	case T_INT:
	{
		str = "int";
		break;
	}
	case T_FLOAT:
	{
		str = "float";
		break;
	}
	case T_LONG:
	{
		str = "long";
		break;
	}

	case T_DOUBLE:
	{
		str = "double";
		break;
	}
	default:
		str = "??";
		break;
	}

	return str;
}
